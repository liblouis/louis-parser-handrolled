#+title: liblouis re-implementation in Rust

A re-write of liblouis in Rust.

* Usage

Get help:

#+BEGIN_SRC shell
  $ cargo run -- help
#+END_SRC

Translate some text:

#+BEGIN_SRC shell
  $ cargo run -- translate ~/src/liblouis/tables/de-comp6.utb 
  > Guten Tag
  ⠈⠛⠥⠞⠑⠝⠀⠈⠞⠁⠛⠀
#+END_SRC

Test the parser:

#+BEGIN_SRC shell
  $ cargo run -- parse
  > nofor letter e 123-1
  Letter { character: 'e', dots: Explicit([{Dot2, Dot1, Dot3}, {Dot1}]), constraints: EnumSet(Nofor) }
#+END_SRC

Run a YAML test. Because support for display tables is currently
missing many of them fail:

#+BEGIN_SRC shell
  $ LOUIS_TABLE_PATH=~/src/liblouis/tables cargo run -- check ~/src/liblouis/tests/braille-specs/de-comp6.yaml
  Failure { input: "www.xyz.ch", expected: "www.xyz.ch", actual: "⠺⠺⠺⠄⠭⠽⠵⠄⠉⠓" }
  Failure { input: "www.e-text.ch", expected: "www.e-text.ch", actual: "⠺⠺⠺⠄⠑⠤⠞⠑⠭⠞⠄⠉⠓" }
  Failure { input: "meier_alex@ubs.com", expected: "meier\"_alex\"`ubs.com", actual: "⠍⠑⠊⠑⠗⠈⠸⠁⠇⠑⠭⠈⠜⠥⠃⠎⠄⠉⠕⠍" }
  Failure { input: "http://www.google-test.ch/test?=:;+%#$", expected: "http://www.google-test.ch/test?=:;+%#$$", actual: "⠓⠞⠞⠏⠒⠲⠲⠺⠺⠺⠄⠛⠕⠕⠛⠇⠑⠤⠞⠑⠎⠞⠄⠉⠓⠲⠞⠑⠎⠞⠢⠶⠒⠆⠖⠿⠼⠨⠨" }
  Failure { input: "peter34@gmx.net", expected: "peter34\"`gmx.net", actual: "⠏⠑⠞⠑⠗⠩⠹⠈⠜⠛⠍⠭⠄⠝⠑⠞" }
  Failure { input: "@peter34", expected: "\"`peter34", actual: "⠈⠜⠏⠑⠞⠑⠗⠩⠹" }
  Failure { input: "C:/ordner/inhalt_version_1", expected: "\"c:/ordner/inhalt\"_version\"_1", actual: "⠈⠉⠒⠲⠕⠗⠙⠝⠑⠗⠲⠊⠝⠓⠁⠇⠞⠈⠸⠧⠑⠗⠎⠊⠕⠝⠈⠸⠡" }
  Failure { input: "for(i=0;i<=12; i++ { blabla }", expected: "for(i=0;i<=12; i++ { blabla }", actual: "⠋⠕⠗⠦⠊⠶⠬⠆⠊⠰⠶⠡⠣⠆⠀⠊⠖⠖⠀⠷⠀⠃⠇⠁⠃⠇⠁⠀⠾" }
  ================================================================================
  8 tests run:
  0 successes [0%]
  8 failures [100%]
  0 expected failures [0%]
  0 unexpected successes [0%]
#+END_SRC

* Rationale
Many if not most of the CVEs of liblouis are rooted in the manual
memory management in the C version of liblouis.

Moving to Rust is of tremendeous help not only for the solid memory
management to avoid buffer overflow problems, but also to bring joy
back into liblouis maintenance.

* Status
With the some small exceptions the parser is complete. Translation
using only character and most translation opcodes basically works.

The original YAML test suite is supported and can be used to test the
re-implementation.

* Prerequisites

- You need the [[https://www.rust-lang.org/][Rust tool chain]].

* Contributing
If you have any improvements or comments please feel free to file a
pull request or an issue.

* Acknowledgments

A lot of inspiration for the hand-rolled parser comes from the
absolutely fantastic book [[https://craftinginterpreters.com/][Crafting Interpreters]] by Robert Nystrom.
Surely [[http://mitpress.mit.edu/9780262510875/structure-and-interpretation-of-computer-programs/][Structure and Interpretation of Computer Programs]] has had some
influence as must have the [[https://people.inf.ethz.ch/wirth/CompilerConstruction/CompilerConstruction1.pdf][Compiler Construction]] classes with Niklaus
Wirth.

The parser is built from the grammar used in [[https://github.com/liblouis/tree-sitter-liblouis][tree-sitter-liblouis]],
which is a port of the [[https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form][EBNF grammar]] in [[https://github.com/liblouis/rewrite-louis][rewrite-louis]], which in turn is
a just port of the [[https://en.wikipedia.org/wiki/Parsing_expression_grammar][Parsing expression grammar]] from [[https://github.com/liblouis/louis-parser][louis-parser]].

* Todo
- [ ] (Emphasis and Caps) Indication 
- [ ] The correct, multipass and match opcodes
- [ ] Word boundaries so we could support beg- and endword.
- [ ] Handle implicit braille definitions, i.e. '='
- [ ] Typeforms
- [ ] Cursor handling
- [ ] Hyphenation
  - will probably be delegated to the [[https://docs.rs/hyphenation/latest/hyphenation/][hyphenation crate]]
- [ ] Add an API so that the functionality can be used as a library
- [ ] Table resolution based on metadata
- [ ] Display tables

* License

Copyright (C) 2023 Swiss Library for the Blind, Visually Impaired and Print Disabled

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see
<https://www.gnu.org/licenses/>.
